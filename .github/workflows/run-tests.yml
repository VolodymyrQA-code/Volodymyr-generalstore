name: Android UI Tests with Allure

on:
  push:
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 40

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2

      - name: Cache npm packages
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.19.0

      - name: Install Appium
        run: |
          npm install -g appium@3.0.2
          appium driver install uiautomator2

      - name: Set up Android SDK path
        run: |
          echo "ANDROID_HOME=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "$ANDROID_HOME/emulator" >> $GITHUB_PATH
          echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH

      - name: Start Android emulator and run tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30
          target: default
          arch: x86_64
          profile: pixel
          disable-animations: true
          script: |
            set -e
            export CI=true
            echo "üïì Booting emulator..."
  
            # –û—á—ñ–∫—É—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –µ–º—É–ª—è—Ç–æ—Ä–∞
            timeout=300; counter=0; while [ "$(adb shell getprop sys.boot_completed 2>/dev/null | tr -d '\r')" != "1" ]; do if [ $counter -ge $timeout ]; then echo "‚ùå Timeout waiting for emulator to boot"; exit 1; fi; echo "Waiting for emulator to boot... ($counter/$timeout)"; sleep 5; counter=$((counter + 5)); done

            # –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –µ–∫—Ä–∞–Ω
            adb shell input keyevent 82
            echo "‚úÖ Emulator ready!"
  
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∏—Å—Ç—Ä–æ—ó
            adb devices
  
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ APK
            echo "üì¶ Installing APK..."; adb install -r ./General-Store.apk || { echo "Failed to install APK, trying to uninstall first..."; adb uninstall com.androidsample.generalstore || true; adb install -r ./General-Store.apk; }

            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –¥–æ–¥–∞—Ç–æ–∫
            echo "üöÄ Launching app..."
            adb shell am start -n com.androidsample.generalstore/.SplashActivity
            sleep 10
  
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω –¥–æ–¥–∞—Ç–∫—É
            echo "üì± App status:"
            adb shell dumpsys window windows | grep -E "mCurrentFocus|mFocusedApp" || true
  
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ Appium —Å–µ—Ä–≤–µ—Ä
            echo "üì∏ Starting Appium server..."
            appium --base-path /wd/hub --log-level info > appium.log 2>&1 &
            APPIUM_PID=$!
  
            # –û—á—ñ–∫—É—î–º–æ –∑–∞–ø—É—Å–∫ Appium
            echo "Waiting for Appium to start..."; for i in {1..30}; do if curl -s http://localhost:4723/wd/hub/status > /dev/null; then echo "‚úÖ Appium server is ready!"; break; fi; echo "Waiting for Appium... attempt $i/30"; sleep 2; done
 
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç–∏
            echo "üß™ Running Maven tests..."
            mvn -B clean test -Dsurefire.useFile=false -Dallure.results.directory=target/allure-results || TEST_EXIT_CODE=$?

  
            # –ó—É–ø–∏–Ω—è—î–º–æ Appium
            echo "üßπ Stopping Appium..."; if [ -n "$APPIUM_PID" ]; then kill $APPIUM_PID 2>/dev/null || true; fi

            # –í–∏–≤–æ–¥–∏–º–æ –ª–æ–≥–∏ Appium –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            if [ -f appium.log ]; then echo "üìã Appium logs (last 50 lines):"; tail -50 appium.log; fi

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
            if [ -d "target/allure-results" ]; then echo "‚úÖ Test results found in target/allure-results"; ls -la target/allure-results/; else echo "‚ö†Ô∏è No test results found in target/allure-results"; mkdir -p target/allure-results; echo '{}' > target/allure-results/dummy.json; fi

            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ–¥ –≤–∏—Ö–æ–¥—É —Ç–µ—Å—Ç—ñ–≤
            exit ${TEST_EXIT_CODE:-0}

      - name: Generate Allure report
        if: always()
        run: |
          # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—î—é –∑–≤—ñ—Ç—É
          if [ -d "target/allure-results" ] && [ "$(ls -A target/allure-results)" ]; then echo "üìä Generating Allure report..."; rm -rf target/site/allure-maven-plugin || true; mvn -B allure:report; else echo "‚ö†Ô∏è No test results to generate report from"; mkdir -p target/site/allure-maven-plugin; echo "<html><body><h1>No test results available</h1></body></html>" > target/site/allure-maven-plugin/index.html; fi

      - name: Upload Allure report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: target/site/allure-maven-plugin/
          if-no-files-found: warn

      - name: Upload test logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs
          path: |
            appium.log
            target/surefire-reports/
          if-no-files-found: ignore
