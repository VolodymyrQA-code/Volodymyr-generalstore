package pages;

import io.appium.java_client.android.AndroidDriver;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.TimeoutException;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.apache.commons.io.FileUtils;
import io.qameta.allure.Step;

import java.io.File;
import java.io.IOException;
import java.time.Duration;

public class SplashPage {
    private AndroidDriver driver;

    // ID –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
    private final By splashId = By.id("com.androidsample.generalstore:id/splashscreen");
    private final By homeToolbarId = By.id("com.androidsample.generalstore:id/toolbar_title");

    public SplashPage(AndroidDriver driver) {
        this.driver = driver;
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ splash screen –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è.
     * –£ CI –∑–±—ñ–ª—å—à–µ–Ω–∏–π timeout.
     * –õ–æ–≥—É–≤–∞–Ω–Ω—è —á–∞—Å—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤ Allure.
     */
    @Step("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è Splash Screen")
    public boolean isSplashDisplayed() {
        boolean isCI = System.getenv("CI") != null && System.getenv("CI").equalsIgnoreCase("true");
        long timeout = isCI ? 90 : 15; // seconds

        long startTime = System.currentTimeMillis();

        try {
            WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(timeout));
            WebElement splash = wait.until(ExpectedConditions.visibilityOfElementLocated(splashId));

            long elapsed = System.currentTimeMillis() - startTime;
            System.out.println("‚úÖ Splash screen detected! –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è: " + elapsed / 1000.0 + "s");
            return splash.isDisplayed();

        } catch (TimeoutException e) {
            long elapsed = System.currentTimeMillis() - startTime;
            System.out.println("‚ö†Ô∏è Splash screen not found after " + timeout + "s. –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è: " + elapsed / 1000.0 + "s");

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–∂–µ –≤—ñ–¥–∫—Ä–∏–≤—Å—è –≥–æ–ª–æ–≤–Ω–∏–π –µ–∫—Ä–∞–Ω
            try {
                WebDriverWait waitHome = new WebDriverWait(driver, Duration.ofSeconds(5));
                WebElement homeToolbar = waitHome.until(ExpectedConditions.visibilityOfElementLocated(homeToolbarId));
                System.out.println("‚ÑπÔ∏è Splash skipped, –∞–ª–µ –≥–æ–ª–æ–≤–Ω–∏–π –µ–∫—Ä–∞–Ω –≤–∏–¥–∏–º–∏–π. –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è: " + elapsed / 1000.0 + "s");
                return true;
            } catch (TimeoutException ex) {
                System.out.println("‚ùå Neither splash nor home screen found. Saving debug info...");
                saveDebugInfo();
                return false;
            }
        }
    }

    @Step("–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–∫—Ä—ñ–Ω—à–æ—Ç—É —Ç–∞ PageSource –¥–ª—è –¥–µ–±–∞–≥—É")
    private void saveDebugInfo() {
        try {
            File screenshot = driver.getScreenshotAs(OutputType.FILE);
            File targetFile = new File("target/screenshots/splash_timeout.png");
            FileUtils.copyFile(screenshot, targetFile);
            System.out.println("üì∏ Screenshot saved: " + targetFile.getAbsolutePath());

            File pageSourceFile = new File("target/screenshots/splash_timeout.xml");
            FileUtils.writeStringToFile(pageSourceFile, driver.getPageSource(), "UTF-8");
            System.out.println("üìÑ Page source saved: " + pageSourceFile.getAbsolutePath());
        } catch (IOException ioEx) {
            System.out.println("‚ö†Ô∏è Failed to save screenshot or page source: " + ioEx.getMessage());
        }
    }
}
